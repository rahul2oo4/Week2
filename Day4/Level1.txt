Sample Problem 1: Library Management with Books and Authors
Description: Model a Book system where Book is the superclass, and Author is a subclass.
Tasks:
Define a superclass Book with attributes like title and publicationYear.
Define a subclass Author with additional attributes like name and bio.
Create a method displayInfo() to show details of the book and its author.
Goal: Practice single inheritance by extending the base class and adding more specific details in the subclass.
class Book
{
   String title;
   int year;
}
class Author extends Book
{
   String name;
   String bio;

   Author()
   {
       this.title = "The Disapperance";
       this.year = 2024;
       this.name = "Rahul Reddy";
       this.bio = "Necromancer";
   }
   void display()
   {
       System.out.println(title);
       System.out.println(year);
       System.out.println(name);
       System.out.println(bio);
   }
}
public class Main
{
   public static void main(String[] args)
   {
   Author author = new Author();
   author.display();
}}



Sample Problem 2: Smart Home Devices
Description: Create a hierarchy for a smart home system where Device is the superclass and Thermostat is a subclass.
Tasks:
Define a superclass Device with attributes like deviceId and status.
Create a subclass Thermostat with additional attributes like temperatureSetting.
Implement a method displayStatus() to show each device's current settings.
Goal: Understand single inheritance by adding specific attributes to a subclass, keeping the superclass general
class Device
{
   String deviceID;
   String status;
}
class Thermostat extends Device
{
   int temperature;

   Thermostat()
   {
       this.deviceID = "KRSL343";
       this.status = "On";
       this.temperature = 18;
   }
   void display()
   {
       System.out.println(deviceID);
       System.out.println(status);
       System.out.println(temperature);
   }
}
public class Main
{
   public static void main(String[] args)
   {
   Thermostat author = new Thermostat();
   author.display();
}}


Multilevel Inheritance
Sample Problem 1: Online Retail Order Management
Description: Create a multilevel hierarchy to manage orders, where Order is the base class, ShippedOrder is a subclass, and DeliveredOrder extends ShippedOrder.
Tasks:
Define a base class Order with common attributes like orderId and orderDate.
Create a subclass ShippedOrder with additional attributes like trackingNumber.
Create another subclass DeliveredOrder extending ShippedOrder, adding a deliveryDate attribute.
Implement a method getOrderStatus() to return the current order status based on the class level.
Goal: Explore multilevel inheritance, showing how attributes and methods can be added across a chain of classes.
class Order {
    int orderId;
    String orderDate;

    Order(int orderId, String orderDate) {
        this.orderId = orderId;
        this.orderDate = orderDate;
    }

    String getOrderStatus() {
        return "Order Placed";
    }

    void showDetails() {
        System.out.println("Order ID: " + orderId);
        System.out.println("Order Date: " + orderDate);
    }
}

class ShippedOrder extends Order {
    String trackingNumber;

    ShippedOrder(int orderId, String orderDate, String trackingNumber) {
        super(orderId, orderDate);
        this.trackingNumber = trackingNumber;
    }

    @Override
    String getOrderStatus() {
        return "Order Shipped";
    }

    @Override
    void showDetails() {
        super.showDetails();
        System.out.println("Tracking No: " + trackingNumber);
    }
}

class DeliveredOrder extends ShippedOrder {
    String deliveryDate;

    DeliveredOrder(int orderId, String orderDate, String trackingNumber, String deliveryDate) {
        super(orderId, orderDate, trackingNumber);
        this.deliveryDate = deliveryDate;
    }

    @Override
    String getOrderStatus() {
        return "Order Delivered";
    }

    @Override
    void showDetails() {
        super.showDetails();
        System.out.println("Delivery Date: " + deliveryDate);
    }
}

public class Main {
    public static void main(String[] args) {
        Order o = new Order(101, "2025-04-11");
        ShippedOrder so = new ShippedOrder(102, "2025-04-10", "TRK12345");
        DeliveredOrder do1 = new DeliveredOrder(103, "2025-04-09", "TRK54321", "2025-04-11");

             o.showDetails();
        System.out.println("Status: " + o.getOrderStatus());
 
        so.showDetails();
        System.out.println("Status: " + so.getOrderStatus());

            do1.showDetails();
        System.out.println("Status: " + do1.getOrderStatus());
    }
}





Sample Problem 2: Educational Course Hierarchy
Description: Model a course system where Course is the base class, OnlineCourse is a subclass, and PaidOnlineCourse extends OnlineCourse.
Tasks:
Define a superclass Course with attributes like courseName and duration.
Define OnlineCourse to add attributes such as platform and isRecorded.
Define PaidOnlineCourse to add fee and discount.
Goal: Demonstrate how each level of inheritance builds on the previous, adding complexity to the system.

Hierarchical Inheritance
Sample Problem 1: Bank Account Types
Description: Model a banking system with different account types using hierarchical inheritance. BankAccount is the superclass, with SavingsAccount, CheckingAccount, and FixedDepositAccount as subclasses.
Tasks:
Define a base class BankAccount with attributes like accountNumber and balance.
Define subclasses SavingsAccount, CheckingAccount, and FixedDepositAccount, each with unique attributes like interestRate for SavingsAccount and withdrawalLimit for CheckingAccount.
Implement a method displayAccountType() in each subclass to specify the account type.
Goal: Explore hierarchical inheritance, demonstrating how each subclass can have unique attributes while inheriting from a shared superclass.
class BankAccount {
    String accNo;
    double bal;

    BankAccount(String a, double b) {
        accNo = a;
        bal = b;
    }
}

class SavingsAccount extends BankAccount {
    double rate;

    SavingsAccount(String a, double b, double r) {
        super(a, b);
        rate = r;
    }

    void displayAccountType() {
        System.out.println("Savings Account");
    }
}

class CheckingAccount extends BankAccount {
    double limit;

    CheckingAccount(String a, double b, double l) {
        super(a, b);
        limit = l;
    }

    void displayAccountType() {
        System.out.println("Checking Account");
    }
}

class FixedDepositAccount extends BankAccount {
    int duration;

    FixedDepositAccount(String a, double b, int d) {
        super(a, b);
        duration = d;
    }

    void displayAccountType() {
        System.out.println("Fixed Deposit Account");
    }
}

public class Main {
    public static void main(String[] args) {
        SavingsAccount s = new SavingsAccount("S123", 1000.0, 4.5);
        CheckingAccount c = new CheckingAccount("C456", 2000.0, 500.0);
        FixedDepositAccount f = new FixedDepositAccount("F789", 5000.0, 12);

        s.displayAccountType();
        c.displayAccountType();
        f.displayAccountType();
    }
}




Sample Problem 2: School System with Different Roles
Description: Create a hierarchy for a school system where Person is the superclass, and Teacher, Student, and Staff are subclasses.
Tasks:
Define a superclass Person with common attributes like name and age.
Define subclasses Teacher, Student, and Staff with specific attributes (e.g., subject for Teacher and grade for Student).
Each subclass should have a method like displayRole() that describes the role.
Goal: Demonstrate hierarchical inheritance by modeling different roles in a school, each with shared and unique characteristics.
class Person {
    String name;
    int age;

    Person(String n, int a) {
        name = n;
        age = a;
    }
}

class Teacher extends Person {
    String sub;

    Teacher(String n, int a, String s) {
        super(n, a);
        sub = s;
    }

    void displayRole() {
        System.out.println("Teacher");
    }
}

class Student extends Person {
    int grade;

    Student(String n, int a, int g) {
        super(n, a);
        grade = g;
    }

    void displayRole() {
        System.out.println("Student");
    }
}

class Staff extends Person {
    String dept;

    Staff(String n, int a, String d) {
        super(n, a);
        dept = d;
    }

    void displayRole() {
        System.out.println("Staff");
    }
}

public class Main {
    public static void main(String[] args) {
        Teacher t = new Teacher("Amit", 35, "Math");
        Student s = new Student("Ravi", 16, 10);
        Staff st = new Staff("Neha", 40, "Admin");

        t.displayRole();
        s.displayRole();
        st.displayRole();
    }
}




Hybrid Inheritance (Simulating Multiple Inheritance)
Since Java doesnâ€™t support multiple inheritance directly, hybrid inheritance is typically achieved through interfaces.
Sample Problem 1: Restaurant Management System with Hybrid Inheritance
Description: Model a restaurant system where Person is the superclass and Chef and Waiter are subclasses. Both Chef and Waiter should implement a Worker interface that requires a performDuties() method.
Tasks:
Define a superclass Person with attributes like name and id.
Create an interface Worker with a method performDuties().
Define subclasses Chef and Waiter that inherit from Person and implement the Worker interface, each providing a unique implementation of performDuties().
Goal: Practice hybrid inheritance by combining inheritance and interfaces, giving multiple behaviors to the same objects.


Sample Problem 2: Vehicle Management System with Hybrid Inheritance
Description: Model a vehicle system where Vehicle is the superclass and ElectricVehicle and PetrolVehicle are subclasses. Additionally, create a Refuelable interface implemented by PetrolVehicle.
Tasks:
Define a superclass Vehicle with attributes like maxSpeed and model.
Create an interface Refuelable with a method refuel().
Define subclasses ElectricVehicle and PetrolVehicle. PetrolVehicle should implement Refuelable, while ElectricVehicle include a charge() method.
Goal: Use hybrid inheritance by having PetrolVehicle implement both Vehicle and Refuelable, demonstrating how Java interfaces allow adding multiple behaviors.
interface Refuelable {
    void refuel();
}

class Vehicle {
    String model;
    int maxSpeed;

    Vehicle(String m, int s) {
        model = m;
        maxSpeed = s;
    }
}

class ElectricVehicle extends Vehicle {
    ElectricVehicle(String m, int s) {
        super(m, s);
    }

    void charge() {
        System.out.println("Charging electric vehicle");
    }
}

class PetrolVehicle extends Vehicle implements Refuelable {
    PetrolVehicle(String m, int s) {
        super(m, s);
    }

    public void refuel() {
        System.out.println("Refueling petrol vehicle");
    }
}

public class Main {
    public static void main(String[] args) {
        ElectricVehicle e = new ElectricVehicle("Tesla", 200);
        PetrolVehicle p = new PetrolVehicle("Honda", 180);

        e.charge();
        p.refuel();
    }
}



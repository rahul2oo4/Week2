Sample Program 1: Bank Account System
Create a BankAccount class with the following features:
Static:
○       A static variable bankName is shared across all accounts.
○       A static method getTotalAccounts() to display the total number of accounts.
This:
○       Use this to resolve ambiguity in the constructor when initializing accountHolderName and accountNumber.
Final:
○       Use a final variable accountNumber to ensure it cannot be changed once assigned.
Instanceof:
○       Check if an account object is an instance of the BankAccount class before displaying its details.
 class BankAccount {
    static String bankName = "MyBank";
    static int totalAccs = 0;

    final int accNum;
    String accHolder;

    BankAccount(int accNum, String accHolder) {
        this.accNum = accNum;
        this.accHolder = accHolder;
        totalAccs++;
    }

    static void getTotalAccounts() {
        System.out.println("Total accounts: " + totalAccs);
    }

    void showDetails() {
        if (this instanceof BankAccount) {
            System.out.println("Bank: " + bankName);
            System.out.println("Account No: " + accNum);
            System.out.println("Holder: " + accHolder);
        }
    }
}

public class Main {
    public static void main(String[] args) {
        BankAccount a1 = new BankAccount(101, "Ravi");
        BankAccount a2 = new BankAccount(102, "Neha");

        a1.showDetails();
        a2.showDetails();

        BankAccount.getTotalAccounts();
    }
}



 
 

Sample Program 2: Library Management System
Create a Book class to manage library books with the following features:
Static:
○       A static variable libraryName shared across all books.
○       A static method displayLibraryName() to print the library name.
This:
○       Use this to initialize title, author, and isbn in the constructor.
Final:
○       Use a final variable isbn to ensure the unique identifier of a book cannot be changed.
Instanceof:
○       Verify if an object is an instance of the Book class before displaying its details.
 
 
 class Book {
    static String libraryName = "City Library";
    final String isbn;
    String title;
    String author;

    Book(String title, String author, String isbn) {
        this.title = title;
        this.author = author;
        this.isbn = isbn;
    }

    static void displayLibraryName() {
        System.out.println("Library: " + libraryName);
    }

    void showBook() {
        if (this instanceof Book) {
            System.out.println("Title: " + title);
            System.out.println("Author: " + author);
            System.out.println("ISBN: " + isbn);
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Book b1 = new Book("Wings of Fire", "A.P.J Abdul Kalam", "ISBN001");
        Book b2 = new Book("The Alchemist", "Paulo Coelho", "ISBN002");

        Book.displayLibraryName();
        b1.showBook();
        b2.showBook();
    }
}





 
Sample Program 3: Employee Management System
Design an Employee class with the following features:
Static:
○       A static variable companyName shared by all employees.
○       A static method displayTotalEmployees() to show the total number of employees.
This:
○       Use this to initialize name, id, and designation in the constructor.
Final:
○       Use a final variable id for the employee ID, which cannot be modified after assignment.
Instanceof
○       Check if a given object is an instance of the Employee class before printing the employee details.
 class Employee {
    static String companyName = "TechCorp";
    static int totalEmps = 0;

    final int id;
    String name;
    String designation;

    Employee(int id, String name, String designation) {
        this.id = id;
        this.name = name;
        this.designation = designation;
        totalEmps++;
    }

    static void displayTotalEmployees() {
        System.out.println("Total Employees: " + totalEmps);
    }

    void showEmployee() {
        if (this instanceof Employee) {
            System.out.println("Company: " + companyName);
            System.out.println("ID: " + id);
            System.out.println("Name: " + name);
            System.out.println("Designation: " + designation);
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Employee e1 = new Employee(1, "Rahul", "Developer");
        Employee e2 = new Employee(2, "Sneha", "Tester");

        e1.showEmployee();
        e2.showEmployee();

        Employee.displayTotalEmployees();
    }
}




 

Sample Program 4: Shopping Cart System
Create a Product class to manage shopping cart items with the following features:
Static:
○       A static variable discount shared by all products.
○       A static method updateDiscount() to modify the discount percentage.
This:
○       Use this to initialize productName, price, and quantity in the constructor.
Final:
○       Use a final variable productID to ensure each product has a unique identifier that cannot be changed.
Instanceof:
○       Validate whether an object is an instance of the Product class before processing its details.
class Product {
    static double discount = 5.0; // shared discount in percentage
    final int productID;
    String productName;
    double price;
    int quantity;

    Product(int productID, String productName, double price, int quantity) {
        this.productID = productID;
        this.productName = productName;
        this.price = price;
        this.quantity = quantity;
    }

    static void updateDiscount(double newDiscount) {
        discount = newDiscount;
        System.out.println("Discount updated to: " + discount + "%");
    }

    void showProduct() {
        if (this instanceof Product) {
            System.out.println("ID: " + productID);
            System.out.println("Name: " + productName);
            System.out.println("Price: ₹" + price);
            System.out.println("Quantity: " + quantity);
            System.out.println("Discount: " + discount + "%");
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Product p1 = new Product(101, "Laptop", 55000, 1);
        Product p2 = new Product(102, "Mouse", 500, 2);

        p1.showProduct();
        p2.showProduct();

        Product.updateDiscount(10.0);

        p1.showProduct();
        p2.showProduct();
    }
}





Sample Program 5: University Student Management
Create a Student class to manage student data with the following features:
Static:
○       A static variable universityName shared across all students.
○       A static method displayTotalStudents() to show the number of students enrolled.
This:
○       Use this in the constructor to initialize name, rollNumber, and grade.
Final:
○       Use a final variable rollNumber for each student that cannot be changed.
Instanceof:
○       Check if a given object is an instance of the Student class before performing operations like displaying or updating grades.
 class Student {
    static String universityName = "SRM University";
    static int totalStudents = 0;

    final int rollNumber;
    String name;
    String grade;

    Student(int rollNumber, String name, String grade) {
        this.rollNumber = rollNumber;
        this.name = name;
        this.grade = grade;
        totalStudents++;
    }

    static void displayTotalStudents() {
        System.out.println("Total students: " + totalStudents);
    }

    void showStudent() {
        if (this instanceof Student) {
            System.out.println("University: " + universityName);
            System.out.println("Roll No: " + rollNumber);
            System.out.println("Name: " + name);
            System.out.println("Grade: " + grade);
        }
    }

    void updateGrade(String newGrade) {
        if (this instanceof Student) {
            this.grade = newGrade;
            System.out.println("Grade updated for " + name);
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Student s1 = new Student(1, "Amit", "A");
        Student s2 = new Student(2, "Priya", "B");

        s1.showStudent();
        s2.showStudent();

        s2.updateGrade("A+");

        s2.showStudent();

        Student.displayTotalStudents();
    }
}



 

Sample Program 6: Vehicle Registration System
Create a Vehicle class with the following features:
Static:
○       A static variable registrationFee common for all vehicles.
○       A static method updateRegistrationFee() to modify the fee.
This:
○       Use this to initialize ownerName, vehicleType, and registrationNumber in the constructor.
Final:
○       Use a final variable registrationNumber to uniquely identify each vehicle.
Instanceof:
○       Check if an object belongs to the Vehicle class before displaying its registration
○       details.

Sample Program 7: Hospital Management System
Create a Patient class with the following features:
Static:
○       A static variable hospitalName shared among all patients.
○       A static method getTotalPatients() to count the total patients admitted.
This:
○       Use this to initialize name, age, and ailment in the constructor.
Final:
○       Use a final variable patientID to uniquely identify each patient.
Instanceof:
○       Check if an object is an instance of the Patient class before displaying its details.
class Patient {
    static String hospitalName = "City Care Hospital";
    static int totalPatients = 0;

    final int patientID;
    String name;
    int age;
    String ailment;

    Patient(int patientID, String name, int age, String ailment) {
        this.patientID = patientID;
        this.name = name;
        this.age = age;
        this.ailment = ailment;
        totalPatients++;
    }

    static void getTotalPatients() {
        System.out.println("Total patients admitted: " + totalPatients);
    }

    void showPatient() {
        if (this instanceof Patient) {
            System.out.println("Hospital: " + hospitalName);
            System.out.println("Patient ID: " + patientID);
            System.out.println("Name: " + name);
            System.out.println("Age: " + age);
            System.out.println("Ailment: " + ailment);
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Patient p1 = new Patient(1001, "Ravi", 45, "Fever");
        Patient p2 = new Patient(1002, "Anita", 30, "Cold");

        p1.showPatient();
        p2.showPatient();

        Patient.getTotalPatients();
    }
}



